name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Pull chatbot Docker image
        run: |
          docker pull samuel1234567/chatbot-image:latest

      - name: Run chatbot and MySQL containers on the same network
        run: |
          # Create a custom Docker network for communication between containers
          docker network create my_network
          
          # Start MySQL container with environment variables
          docker run -d --name mysql --network my_network -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=test_db mysql:8.0

          # Wait for MySQL to be ready
          echo "Waiting for MySQL to be ready..."
          until docker exec mysql mysqladmin -uroot -ppassword --host=mysql --silent --wait=30 ping; do
            echo "MySQL not ready yet, retrying..."
            sleep 5
          done
          echo "MySQL is ready."

          # Create the required database (if it's not already created by MYSQL_DATABASE environment variable)
          docker exec mysql mysql -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS test_db;"

          # Start chatbot container and connect it to the same network
          docker run -d --name chatbot-container --network my_network -p 5005:5005 samuel1234567/chatbot-image:latest
          
          # Wait for the chatbot service to be ready
          echo "Waiting for the chatbot service..."
          until curl -s http://localhost:5005/webhooks/rest/webhook; do
            echo "Chatbot not ready yet, retrying in 5 seconds..."
            sleep 5
          done
          echo "Chatbot is ready."

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          # Create and activate a virtual environment
          python -m venv venv
          source venv/bin/activate
          pip install -r Flask-Website/requirements.txt
          pip install flask_babel
          
          # Also install coverage and pytest to run tests and measure coverage
          pip install coverage pytest

      - name: Create config.py from GitHub Secrets
        run: |
          echo "Creating config.py file from secrets..."
          echo "DB_CONFIG = ${DB_CONFIG}" > Flask-Website/Database/config.py
          # Validate syntax to ensure proper formatting
          python -m py_compile Flask-Website/Database/config.py
        env:
          DB_CONFIG: ${{ secrets.DB_CONFIG }}

      - name: Debug config.py
        run: |
          echo "Contents of config.py:"
          cat Flask-Website/Database/config.py | sed 's/password.*/password: ***}/g'

      - name: Run tests and generate coverage report
        run: |
          # Run tests with coverage collection
          source venv/bin/activate
          export PYTHONPATH=Flask-Website
          coverage run -m pytest
          
          # Generate a report in multiple formats
          coverage report  # Text-based report
          coverage html  # HTML report for local use
          
          # Generate the LCOV report for SonarCloud analysis
          mkdir -p coverage-reports  # Create a folder to store coverage report
          coverage lcov > coverage-reports/coverage.lcov  # Save coverage in LCOV format
          


      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            -Dsonar.projectKey=dogface3_AI-Chatbot
            -Dsonar.organization=dogface3
            -Dsonar.sources=Flask-Website
            -Dsonar.projectBaseDir=.
            -Dsonar.exclusions=Flask-Website/mynev/**
            -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.lcov  # Provide path to LCOV report for coverage analysis
