name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: |
          echo "Logging into Docker Hub..."
          docker login -u samuel1234567 # Use your Docker username directly, no secret needed

      - name: Pull chatbot Docker image
        run: |
          docker pull samuel1234567/chatbot-image:latest

      - name: Run chatbot container
        run: |
          docker run -d --name chatbot-container -p 5005:5005 samuel1234567/chatbot-image:latest
          
          # Wait for the chatbot service to be ready
          echo "Waiting for the chatbot service..."
          until curl -s http://localhost:5005/webhooks/rest/webhook; do
            echo "Chatbot not ready yet, retrying in 5 seconds..."
            sleep 5
          done
          echo "Chatbot is ready."

      - name: Run MySQL container
        run: |
          # Run MySQL container with default password and database
          docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=chatappdatabase -p 3306:3306 mysql:latest
          
          # Wait for MySQL to be ready
          echo "Waiting for MySQL service..."
          until docker exec mysql-container mysqladmin -uroot -proot ping --silent; do
            echo "MySQL not ready yet, retrying in 5 seconds..."
            sleep 5
          done
          echo "MySQL is ready."
        
      - name: Check MySQL Database Existence
        run: |
          echo "Checking if chatappdatabase exists in MySQL..."
          docker exec mysql-container mysql -uroot -proot -e "SHOW DATABASES;" | grep chatappdatabase

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          # Create and activate a virtual environment
          python -m venv venv
          source venv/bin/activate
          pip install -r Flask-Website/requirements.txt
          pip install flask_babel
          
          # Also install coverage and pytest to run tests and measure coverage
          pip install coverage pytest

      - name: Create config.py from default values
        run: |
          echo "Creating config.py with default DB values..."
          echo "DB_CONFIG = 'root:root@tcp(mysql:3306)/chatappdatabase'" > Flask-Website/Database/config.py
          # Validate syntax to ensure proper formatting
          python -m py_compile Flask-Website/Database/config.py

      - name: Debug config.py
        run: |
          echo "Contents of config.py:"
          cat Flask-Website/Database/config.py | sed 's/password.*/password: ***}/g'

      - name: Run tests and generate coverage report
        run: |
          # Run tests with coverage collection
          source venv/bin/activate
          export PYTHONPATH=Flask-Website
          coverage run -m pytest
          
          # Generate a report in multiple formats
          coverage report  # Text-based report
          coverage html  # HTML report for local use
          
          # Generate the LCOV report for SonarCloud analysis
          mkdir -p coverage-reports  # Create a folder to store coverage report
          coverage lcov > coverage-reports/coverage.lcov  # Save coverage in LCOV format
          
          # Optionally check the generated coverage report
          ls -la coverage-reports
          
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            -Dsonar.projectKey=dogface3_AI-Chatbot
            -Dsonar.organization=dogface3
            -Dsonar.sources=Flask-Website
            -Dsonar.projectBaseDir=.
            -Dsonar.exclusions=Flask-Website/mynev/**
            -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.lcov  # Provide path to LCOV report for coverage analysis

