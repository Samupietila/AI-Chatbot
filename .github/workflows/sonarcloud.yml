jobs:
  Analysis:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-start-period=30s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Pull chatbot Docker image
        run: |
          docker pull samuel1234567/chatbot-image:latest

      - name: Run chatbot container
        run: |
          docker run -d --name chatbot-container -p 5005:5005 samuel1234567/chatbot-image:latest
          
          # Wait for the chatbot service to be ready
          echo "Waiting for the chatbot service..."
          until curl -s http://localhost:5005/webhooks/rest/webhook; do
            echo "Chatbot not ready yet, retrying in 5 seconds..."
            sleep 5
          done
          echo "Chatbot is ready."

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          # Create and activate a virtual environment
          python -m venv venv
          source venv/bin/activate
          pip install -r Flask-Website/requirements.txt
          pip install flask_babel
          
          # Also install coverage and pytest to run tests and measure coverage
          pip install coverage pytest

      - name: Set up environment variables for MySQL database (Test DB)
        run: |
          echo "Setting up environment variables for test database..."
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_PORT=3306" >> $GITHUB_ENV
          echo "DB_NAME=test_db" >> $GITHUB_ENV
          echo "DB_USER=test_user" >> $GITHUB_ENV
          echo "DB_PASSWORD=test_password" >> $GITHUB_ENV

      - name: Create config.py dynamically
        run: |
          echo "Creating config.py file dynamically..."
          echo "DB_CONFIG = {" > Flask-Website/Database/config.py
          echo "    'host': '${{ env.DB_HOST }}'," >> Flask-Website/Database/config.py
          echo "    'port': ${GITHUB_ENV.DB_PORT}," >> Flask-Website/Database/config.py  # Ensure port is an integer
          echo "    'database': '${{ env.DB_NAME }}'," >> Flask-Website/Database/config.py
          echo "    'user': '${{ env.DB_USER }}'," >> Flask-Website/Database/config.py
          echo "    'password': '${{ env.DB_PASSWORD }}'" >> Flask-Website/Database/config.py
          echo "}" >> Flask-Website/Database/config.py
          # Validate the config.py file syntax
          python -m py_compile Flask-Website/Database/config.py

      - name: Debug config.py (optional)
        run: |
          echo "Contents of config.py:"
          cat Flask-Website/Database/config.py | sed 's/password.*/password: ***}/g'

      - name: Run tests and generate coverage report
        run: |
          # Run tests with coverage collection
          source venv/bin/activate
          export PYTHONPATH=Flask-Website
          coverage run -m pytest
          
          # Generate a report in multiple formats
          coverage report  # Text-based report
          coverage html  # HTML report for local use
          
          # Generate the LCOV report for SonarCloud analysis
          mkdir -p coverage-reports  # Create a folder to store coverage report
          coverage lcov > coverage-reports/coverage.lcov  # Save coverage in LCOV format
          
          # Optionally check the generated coverage report
          ls -la coverage-reports

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=dogface3_AI-Chatbot
            -Dsonar.organization=dogface3
            -Dsonar.sources=Flask-Website
            -Dsonar.projectBaseDir=.
            -Dsonar.exclusions=Flask-Website/mynev/**
            -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.lcov
