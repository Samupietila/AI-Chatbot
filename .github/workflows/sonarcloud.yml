name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          # Create and activate a virtual environment
          python -m venv venv
          source venv/bin/activate  # Activate the virtual environment
          pip install -r Flask-Website/requirements.txt
          pip install flask_babel

          # Also install coverage and pytest to run tests and measure coverage
          pip install coverage pytest      

      - name: Build and run chatbot Docker container
        run: |
          echo "Building Docker container for chatbot..."
          docker build -t chatbot-image .  # Build the Docker image
          
          echo "Running Docker container for chatbot..."
          docker run -d --name chatbot-container -p 5005:5005 chatbot-image  # Run the container
          
          # Wait for the chatbot service to become available
          echo "Waiting for chatbot to be ready..."
          until curl -s http://localhost:5005/webhooks/rest/webhook; do
            echo "Chatbot not ready yet, retrying in 5 seconds..."
            sleep 5
          done
          echo "Chatbot is ready."


      - name: Create config.py from GitHub Secrets
        run: |
          echo "Creating config.py file from secrets..."
          echo "DB_CONFIG = ${DB_CONFIG}" > Flask-Website/Database/config.py
          # Validate syntax to ensure proper formatting
          python -m py_compile Flask-Website/Database/config.py
        env:
          DB_CONFIG: ${{ secrets.DB_CONFIG }}

      - name: Debug config.py
        run: |
          echo "Contents of config.py:"
          cat Flask-Website/Database/config.py | sed 's/password.*/password: ***}/g'
                
      - name: Run tests and generate coverage report
        run: |
          # Run tests with coverage collection
          source venv/bin/activate
          export PYTHONPATH=Flask-Website  # Set PYTHONPATH for proper imports
          coverage run -m pytest  # Run pytest and collect coverage
          
          # Generate a report in multiple formats
          coverage report  # Text-based report
          coverage html  # HTML report for local use
          
          # Generate the LCOV report for SonarCloud analysis
          mkdir -p coverage-reports  # Create a folder to store coverage report
          coverage lcov > coverage-reports/coverage.lcov  # Save coverage in LCOV format
          
          # Optionally check the generated coverage report
          ls -la coverage-reports
            
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=dogface3_AI-Chatbot
            -Dsonar.organization=dogface3
            -Dsonar.sources=Flask-Website
            -Dsonar.projectBaseDir=.
            -Dsonar.exclusions=Flask-Website/mynev/**
            -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.lcov  # Provide path to LCOV report for coverage analysis

      - name: Stop and remove chatbot Docker container
        if: always()
        run: |
          echo "Stopping and removing Docker container..."
          docker stop chatbot-container
          docker rm chatbot-container

